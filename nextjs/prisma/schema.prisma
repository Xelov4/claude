generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modèle pour les catégories (avec support pour les catégories parentes/enfants)
model Category {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(100)
  slug            String      @unique @db.VarChar(100)
  description     String?     @db.Text
  parentId        Int?        @map("parent_id")
  orderPosition   Int         @default(0) @map("order_position")
  isVisible       Boolean     @default(true) @map("is_visible")
  metaTitle       String?     @map("meta_title") @db.VarChar(255)
  metaDescription String?     @map("meta_description") @db.Text
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  parent          Category?   @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: SetNull)
  subcategories   Category[]  @relation("CategoryToSubcategory")
  tools           Tool[]

  @@map("categories")
}

// Modèle pour les outils/logiciels
model Tool {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  slug            String            @unique @db.VarChar(100)
  shortDescription String           @map("short_description") @db.VarChar(255)
  longDescription String?           @map("long_description") @db.Text
  logoUrl         String?           @map("logo_url") @db.VarChar(255)
  imageUrl        String?           @map("image_url") @db.VarChar(255)
  websiteUrl      String?           @map("website_url") @db.VarChar(255)
  rating          Decimal           @default(0.0) @db.Decimal(3, 2)
  reviewCount     Int               @default(0) @map("review_count")
  categoryId      Int               @map("category_id")
  pricingType     PricingType       @map("pricing_type")
  priceDetails    String?           @map("price_details") @db.VarChar(255)
  lastUpdated     DateTime?         @map("last_updated")
  isFeatured      Boolean           @default(false) @map("is_featured")
  twitterUrl      String?           @map("twitter_url") @db.VarChar(255)
  linkedinUrl     String?           @map("linkedin_url") @db.VarChar(255)
  instagramUrl    String?           @map("instagram_url") @db.VarChar(255)
  isVisible       Boolean           @default(true) @map("is_visible")
  metaTitle       String?           @map("meta_title") @db.VarChar(255)
  metaDescription String?           @map("meta_description") @db.Text
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  category        Category          @relation(fields: [categoryId], references: [id])
  features        Feature[]
  useCases        UseCase[]
  reviews         Review[]
  toolTags        ToolTag[]
  toolAudiences   ToolAudience[]

  @@map("tools")
}

// Enum pour les types de tarification
enum PricingType {
  Gratuit
  Freemium
  Payant
  EssaiGratuit    @map("Essai Gratuit")

  @@map("pricing_type")
}

// Modèle pour les tags
model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(50)
  slug      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now()) @map("created_at")
  
  // Relations
  toolTags  ToolTag[]

  @@map("tags")
}

// Table de jointure pour la relation many-to-many entre Tool et Tag
model ToolTag {
  toolId    Int      @map("tool_id")
  tagId     Int      @map("tag_id")
  
  // Relations
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([toolId, tagId])
  @@map("tool_tags")
}

// Modèle pour les publics cibles
model TargetAudience {
  id        Int            @id @default(autoincrement())
  name      String         @unique @db.VarChar(100)
  slug      String         @unique @db.VarChar(100)
  createdAt DateTime       @default(now()) @map("created_at")
  
  // Relations
  toolAudiences ToolAudience[]

  @@map("target_audiences")
}

// Table de jointure pour la relation many-to-many entre Tool et TargetAudience
model ToolAudience {
  toolId      Int            @map("tool_id")
  audienceId  Int            @map("audience_id")
  description String?        @db.Text
  
  // Relations
  tool        Tool           @relation(fields: [toolId], references: [id], onDelete: Cascade)
  audience    TargetAudience @relation(fields: [audienceId], references: [id], onDelete: Cascade)
  
  @@id([toolId, audienceId])
  @@map("tool_audiences")
}

// Modèle pour les fonctionnalités des outils
model Feature {
  id             Int      @id @default(autoincrement())
  toolId         Int      @map("tool_id")
  title          String   @db.VarChar(100)
  description    String?  @db.Text
  orderPosition  Int      @default(0) @map("order_position")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  tool           Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("features")
}

// Modèle pour les cas d'utilisation
model UseCase {
  id             Int      @id @default(autoincrement())
  toolId         Int      @map("tool_id")
  title          String   @db.VarChar(100)
  description    String?  @db.Text
  imageUrl       String?  @map("image_url") @db.VarChar(255)
  orderPosition  Int      @default(0) @map("order_position")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  tool           Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("use_cases")
}

// Modèle pour les avis utilisateurs
model Review {
  id          Int       @id @default(autoincrement())
  toolId      Int       @map("tool_id")
  userName    String    @map("user_name") @db.VarChar(100)
  rating      Int
  comment     String?   @db.Text
  reviewDate  DateTime  @default(now()) @map("review_date")
  isVerified  Boolean   @default(false) @map("is_verified")
  isVisible   Boolean   @default(true) @map("is_visible")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  tool        Tool      @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Modèle pour les paramètres du site
model SiteSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("site_settings")
}

// Modèle pour les messages de contact
model Contact {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(100)
  subject   String   @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contacts")
}

// Modèle pour les soumissions d'outils
model ToolSubmission {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  websiteUrl      String    @map("website_url") @db.VarChar(255)
  description     String    @db.Text
  submitterName   String    @map("submitter_name") @db.VarChar(100)
  submitterEmail  String    @map("submitter_email") @db.VarChar(100)
  status          SubmissionStatus @default(Pending)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("tool_submissions")
}

enum SubmissionStatus {
  Pending
  Approved
  Rejected
}

